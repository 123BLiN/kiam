// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package kiam is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	GetPodRoleRequest
	Role
	GetRoleCredentialsRequest
	Credentials
	GetHealthRequest
	HealthStatus
	IsAllowedAssumeRoleRequest
	IsAllowedAssumeRoleResponse
*/
package kiam

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetPodRoleRequest struct {
	Ip string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
}

func (m *GetPodRoleRequest) Reset()                    { *m = GetPodRoleRequest{} }
func (m *GetPodRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPodRoleRequest) ProtoMessage()               {}
func (*GetPodRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetPodRoleRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type Role struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Role) Reset()                    { *m = Role{} }
func (m *Role) String() string            { return proto.CompactTextString(m) }
func (*Role) ProtoMessage()               {}
func (*Role) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Role) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetRoleCredentialsRequest struct {
	Role *Role `protobuf:"bytes,1,opt,name=role" json:"role,omitempty"`
}

func (m *GetRoleCredentialsRequest) Reset()                    { *m = GetRoleCredentialsRequest{} }
func (m *GetRoleCredentialsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRoleCredentialsRequest) ProtoMessage()               {}
func (*GetRoleCredentialsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetRoleCredentialsRequest) GetRole() *Role {
	if m != nil {
		return m.Role
	}
	return nil
}

type Credentials struct {
	Code            string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	Type            string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	AccessKeyId     string `protobuf:"bytes,3,opt,name=access_key_id,json=accessKeyId" json:"access_key_id,omitempty"`
	SecretAccessKey string `protobuf:"bytes,4,opt,name=secret_access_key,json=secretAccessKey" json:"secret_access_key,omitempty"`
	Token           string `protobuf:"bytes,5,opt,name=token" json:"token,omitempty"`
	Expiration      string `protobuf:"bytes,6,opt,name=expiration" json:"expiration,omitempty"`
	LastUpdated     string `protobuf:"bytes,7,opt,name=last_updated,json=lastUpdated" json:"last_updated,omitempty"`
}

func (m *Credentials) Reset()                    { *m = Credentials{} }
func (m *Credentials) String() string            { return proto.CompactTextString(m) }
func (*Credentials) ProtoMessage()               {}
func (*Credentials) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Credentials) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Credentials) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Credentials) GetAccessKeyId() string {
	if m != nil {
		return m.AccessKeyId
	}
	return ""
}

func (m *Credentials) GetSecretAccessKey() string {
	if m != nil {
		return m.SecretAccessKey
	}
	return ""
}

func (m *Credentials) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Credentials) GetExpiration() string {
	if m != nil {
		return m.Expiration
	}
	return ""
}

func (m *Credentials) GetLastUpdated() string {
	if m != nil {
		return m.LastUpdated
	}
	return ""
}

type GetHealthRequest struct {
}

func (m *GetHealthRequest) Reset()                    { *m = GetHealthRequest{} }
func (m *GetHealthRequest) String() string            { return proto.CompactTextString(m) }
func (*GetHealthRequest) ProtoMessage()               {}
func (*GetHealthRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type HealthStatus struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *HealthStatus) Reset()                    { *m = HealthStatus{} }
func (m *HealthStatus) String() string            { return proto.CompactTextString(m) }
func (*HealthStatus) ProtoMessage()               {}
func (*HealthStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *HealthStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type IsAllowedAssumeRoleRequest struct {
	Ip   string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Role *Role  `protobuf:"bytes,2,opt,name=role" json:"role,omitempty"`
}

func (m *IsAllowedAssumeRoleRequest) Reset()                    { *m = IsAllowedAssumeRoleRequest{} }
func (m *IsAllowedAssumeRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*IsAllowedAssumeRoleRequest) ProtoMessage()               {}
func (*IsAllowedAssumeRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *IsAllowedAssumeRoleRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *IsAllowedAssumeRoleRequest) GetRole() *Role {
	if m != nil {
		return m.Role
	}
	return nil
}

type IsAllowedAssumeRoleResponse struct {
	Permitted bool `protobuf:"varint,1,opt,name=permitted" json:"permitted,omitempty"`
}

func (m *IsAllowedAssumeRoleResponse) Reset()                    { *m = IsAllowedAssumeRoleResponse{} }
func (m *IsAllowedAssumeRoleResponse) String() string            { return proto.CompactTextString(m) }
func (*IsAllowedAssumeRoleResponse) ProtoMessage()               {}
func (*IsAllowedAssumeRoleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *IsAllowedAssumeRoleResponse) GetPermitted() bool {
	if m != nil {
		return m.Permitted
	}
	return false
}

func init() {
	proto.RegisterType((*GetPodRoleRequest)(nil), "kiam.GetPodRoleRequest")
	proto.RegisterType((*Role)(nil), "kiam.Role")
	proto.RegisterType((*GetRoleCredentialsRequest)(nil), "kiam.GetRoleCredentialsRequest")
	proto.RegisterType((*Credentials)(nil), "kiam.Credentials")
	proto.RegisterType((*GetHealthRequest)(nil), "kiam.GetHealthRequest")
	proto.RegisterType((*HealthStatus)(nil), "kiam.HealthStatus")
	proto.RegisterType((*IsAllowedAssumeRoleRequest)(nil), "kiam.IsAllowedAssumeRoleRequest")
	proto.RegisterType((*IsAllowedAssumeRoleResponse)(nil), "kiam.IsAllowedAssumeRoleResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for KiamService service

type KiamServiceClient interface {
	GetPodRole(ctx context.Context, in *GetPodRoleRequest, opts ...grpc.CallOption) (*Role, error)
	GetRoleCredentials(ctx context.Context, in *GetRoleCredentialsRequest, opts ...grpc.CallOption) (*Credentials, error)
	GetHealth(ctx context.Context, in *GetHealthRequest, opts ...grpc.CallOption) (*HealthStatus, error)
	IsAllowedAssumeRole(ctx context.Context, in *IsAllowedAssumeRoleRequest, opts ...grpc.CallOption) (*IsAllowedAssumeRoleResponse, error)
}

type kiamServiceClient struct {
	cc *grpc.ClientConn
}

func NewKiamServiceClient(cc *grpc.ClientConn) KiamServiceClient {
	return &kiamServiceClient{cc}
}

func (c *kiamServiceClient) GetPodRole(ctx context.Context, in *GetPodRoleRequest, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := grpc.Invoke(ctx, "/kiam.KiamService/GetPodRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kiamServiceClient) GetRoleCredentials(ctx context.Context, in *GetRoleCredentialsRequest, opts ...grpc.CallOption) (*Credentials, error) {
	out := new(Credentials)
	err := grpc.Invoke(ctx, "/kiam.KiamService/GetRoleCredentials", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kiamServiceClient) GetHealth(ctx context.Context, in *GetHealthRequest, opts ...grpc.CallOption) (*HealthStatus, error) {
	out := new(HealthStatus)
	err := grpc.Invoke(ctx, "/kiam.KiamService/GetHealth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kiamServiceClient) IsAllowedAssumeRole(ctx context.Context, in *IsAllowedAssumeRoleRequest, opts ...grpc.CallOption) (*IsAllowedAssumeRoleResponse, error) {
	out := new(IsAllowedAssumeRoleResponse)
	err := grpc.Invoke(ctx, "/kiam.KiamService/IsAllowedAssumeRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KiamService service

type KiamServiceServer interface {
	GetPodRole(context.Context, *GetPodRoleRequest) (*Role, error)
	GetRoleCredentials(context.Context, *GetRoleCredentialsRequest) (*Credentials, error)
	GetHealth(context.Context, *GetHealthRequest) (*HealthStatus, error)
	IsAllowedAssumeRole(context.Context, *IsAllowedAssumeRoleRequest) (*IsAllowedAssumeRoleResponse, error)
}

func RegisterKiamServiceServer(s *grpc.Server, srv KiamServiceServer) {
	s.RegisterService(&_KiamService_serviceDesc, srv)
}

func _KiamService_GetPodRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPodRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KiamServiceServer).GetPodRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kiam.KiamService/GetPodRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KiamServiceServer).GetPodRole(ctx, req.(*GetPodRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KiamService_GetRoleCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KiamServiceServer).GetRoleCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kiam.KiamService/GetRoleCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KiamServiceServer).GetRoleCredentials(ctx, req.(*GetRoleCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KiamService_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KiamServiceServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kiam.KiamService/GetHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KiamServiceServer).GetHealth(ctx, req.(*GetHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KiamService_IsAllowedAssumeRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAllowedAssumeRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KiamServiceServer).IsAllowedAssumeRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kiam.KiamService/IsAllowedAssumeRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KiamServiceServer).IsAllowedAssumeRole(ctx, req.(*IsAllowedAssumeRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KiamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kiam.KiamService",
	HandlerType: (*KiamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPodRole",
			Handler:    _KiamService_GetPodRole_Handler,
		},
		{
			MethodName: "GetRoleCredentials",
			Handler:    _KiamService_GetRoleCredentials_Handler,
		},
		{
			MethodName: "GetHealth",
			Handler:    _KiamService_GetHealth_Handler,
		},
		{
			MethodName: "IsAllowedAssumeRole",
			Handler:    _KiamService_IsAllowedAssumeRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 437 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x4d, 0x8c, 0xdb, 0x92, 0x49, 0x0b, 0x64, 0x40, 0x60, 0x0c, 0x2a, 0xed, 0x72, 0xa9, 0x38,
	0xe4, 0xd0, 0x9e, 0x50, 0x4f, 0x11, 0x87, 0x50, 0xca, 0x01, 0xa5, 0xe2, 0x86, 0x14, 0x2d, 0xde,
	0x11, 0xac, 0x62, 0x7b, 0x17, 0xef, 0x04, 0xc8, 0x17, 0xf1, 0x57, 0x7c, 0x0b, 0xda, 0xdd, 0xc6,
	0x31, 0x6a, 0xda, 0xdb, 0xec, 0x7b, 0x6f, 0x66, 0x76, 0x9f, 0x9f, 0xe1, 0xc0, 0x51, 0xf3, 0x53,
	0x17, 0x34, 0xb6, 0x8d, 0x61, 0x83, 0xe9, 0x42, 0xcb, 0x4a, 0xbc, 0x86, 0xd1, 0x94, 0xf8, 0x93,
	0x51, 0x33, 0x53, 0xd2, 0x8c, 0x7e, 0x2c, 0xc9, 0x31, 0x3e, 0x80, 0x44, 0xdb, 0xac, 0x7f, 0xd4,
	0x3f, 0x19, 0xcc, 0x12, 0x6d, 0x45, 0x0e, 0xa9, 0xa7, 0x11, 0x21, 0xad, 0x65, 0x45, 0xd7, 0x4c,
	0xa8, 0xc5, 0x39, 0x3c, 0x9f, 0x12, 0x7b, 0xfa, 0x5d, 0x43, 0x8a, 0x6a, 0xd6, 0xb2, 0x74, 0xeb,
	0x41, 0x87, 0x90, 0x36, 0xa6, 0x8c, 0x0d, 0xc3, 0x53, 0x18, 0xfb, 0x95, 0xe3, 0xb0, 0x29, 0xe0,
	0xe2, 0x6f, 0x1f, 0x86, 0x9d, 0x36, 0xbf, 0xa0, 0x30, 0xaa, 0x5d, 0xe0, 0x6b, 0x8f, 0xf1, 0xca,
	0x52, 0x96, 0x44, 0xcc, 0xd7, 0x28, 0xe0, 0x40, 0x16, 0x05, 0x39, 0x37, 0x5f, 0xd0, 0x6a, 0xae,
	0x55, 0x76, 0x2f, 0x90, 0xc3, 0x08, 0x5e, 0xd2, 0xea, 0x42, 0xe1, 0x1b, 0x18, 0x39, 0x2a, 0x1a,
	0xe2, 0xf9, 0x46, 0x9a, 0xa5, 0x41, 0xf7, 0x30, 0x12, 0x93, 0xb5, 0x1a, 0x9f, 0xc0, 0x0e, 0x9b,
	0x05, 0xd5, 0xd9, 0x4e, 0xe0, 0xe3, 0x01, 0x0f, 0x01, 0xe8, 0xb7, 0xd5, 0x8d, 0x64, 0x6d, 0xea,
	0x6c, 0x37, 0x50, 0x1d, 0x04, 0x8f, 0x61, 0xbf, 0x94, 0x8e, 0xe7, 0x4b, 0xab, 0x24, 0x93, 0xca,
	0xf6, 0xe2, 0x25, 0x3c, 0xf6, 0x39, 0x42, 0x02, 0xe1, 0xd1, 0x94, 0xf8, 0x3d, 0xc9, 0x92, 0xbf,
	0x5f, 0x9b, 0x22, 0x4e, 0x60, 0x3f, 0x02, 0x57, 0x2c, 0x79, 0xe9, 0x30, 0x83, 0xbd, 0x8a, 0x9c,
	0x93, 0xdf, 0xd6, 0xef, 0x5e, 0x1f, 0xc5, 0x47, 0xc8, 0x2f, 0xdc, 0xa4, 0x2c, 0xcd, 0x2f, 0x52,
	0x13, 0xe7, 0x96, 0x15, 0xdd, 0xf1, 0x95, 0x5a, 0xb3, 0x93, 0x5b, 0xcc, 0x3e, 0x87, 0x17, 0x5b,
	0xa7, 0x39, 0x6b, 0x6a, 0x47, 0xf8, 0x12, 0x06, 0x96, 0x9a, 0x4a, 0xb3, 0x7f, 0x8a, 0x9f, 0x7a,
	0x7f, 0xb6, 0x01, 0x4e, 0xff, 0x24, 0x30, 0xbc, 0xd4, 0xb2, 0xba, 0x8a, 0x19, 0xc2, 0x33, 0x80,
	0x4d, 0x6e, 0xf0, 0x59, 0x5c, 0x76, 0x23, 0x49, 0x79, 0xe7, 0x16, 0xa2, 0x87, 0x1f, 0x00, 0x6f,
	0x66, 0x05, 0x5f, 0xb5, 0xcd, 0xdb, 0x53, 0x94, 0x8f, 0xa2, 0xa0, 0xc3, 0x88, 0x1e, 0xbe, 0x85,
	0x41, 0xeb, 0x2c, 0x3e, 0x6d, 0x47, 0xfc, 0x67, 0x75, 0x8e, 0x11, 0xef, 0xda, 0x2d, 0x7a, 0xf8,
	0x05, 0x1e, 0x6f, 0x31, 0x02, 0x8f, 0xa2, 0xf8, 0x76, 0xc7, 0xf3, 0xe3, 0x3b, 0x14, 0xd1, 0x45,
	0xd1, 0xfb, 0xba, 0x1b, 0x7e, 0xaf, 0xb3, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x06, 0x8f, 0x09,
	0x31, 0x6f, 0x03, 0x00, 0x00,
}
